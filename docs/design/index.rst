Design
=======

**碧霄** 的设计文档，该文档指导碧霄的实现。

愿景和哲学
----------
- 使编写的软件避免重构，或者至少易于重构
- 声明式编程
- 少写代码，或者至少开心地写代码
    - 怎么算开心？写代码就像说话一样自然

达到的效果
----------
- 声明数据模型即可提供基于该数据模型的CRUD服务
- 使用会话保存与用户代理的状态，包括凭证、数据访问对象等
- 涵盖请求监听与响应、路由、数据模型、数据存储、后台任务、配置管理、日志记录等后端所需的各种功能
    - 请求监听支持HTTP、WebSocket、gRPC等协议，具体见 ``TODO``
- 支持异步和协程

数据模型
^^^^^^^^
- 通过类变量的方式声明数据模型
- 使用装饰器修饰数据模型类，系统自动为数据模型类生成CRUD接口服务
  - 在装饰器中指定如何从数据访问层获得数据模型实例

应用层
^^^^^^^^
- 应用层接受来自传输层的请求，将其交给用户定义的处理器处理，将处理结果返回给传输层
- 维护会话，保存处理器与用户代理之间的状态
- 将请求交给用户定义的处理器由路由来完成，路由负责选择合适的处理函数并解析路径参数。
- 用户可以使用中间件实现逻辑复用
    - 系统在路由完成后会调用注册的中间件
    - 每个中间件都通过 next 切换到下一个中间件。
    - 倒数第一个中间件调用 next 则调用路由记录绑定的处理器
    - 处理器实际上被一个中间件包裹，该中间件负责调用处理器并标准化处理器的返回
    - 处理器返回则一步步恢复中间件 next 后的逻辑的执行
    - 中间件可以获得请求对象、响应对象
- 处理器必须可以被调用，但推荐使用管理器而不是函数作为处理器

路由
^^^^^^
- 由动词+路径组成一个路由键，一个路由键对应一个路由处理器
- 路径支持这些分隔符： ``/``, ``.``
- 支持解析路径参数
- 路由分组，互相嵌套

管理器
^^^^^^^
- 一个管理器实例服务于一个会话
    - 这可以避免在业务逻辑中传递会话ID或者其他会话状态数据
- 实例化的管理器不一定要实例化数据模型
- 管理器通过组合的方式与数据模型结合

会话
^^^^
- 会话对应于用户代理，用于保存服务器业务逻辑与用户代理之间的状态
- 会话不是传输层的概念，而是应用层的概念
- 会话的有一个唯一ID，可以持久存储
  - 但仍然会过期，过期自动清除，避免内存溢出

传输层
-------
不论是怎样的服务模型，都会被标准化为请求-响应模型
- 请求-响应式服务，输入一个请求返回一个响应
- 流式服务，输入一个请求返回一个流，流中可以有多个响应
- 订阅-发布服务
- 事件驱动服务

支持这些传输协议：
- HTTP
- WebSocket(s)

传输层的职能：
- 在指定的位置监听请求
- 将请求交给应用层处理
- 将应用层的处理结果返回给请求方
- 捕捉应用层的异常并报告给请求方

配置管理
--------

日志管理
--------
- 基于 ``structlog``

版本管理
--------
- 建议以接口为单位进行版本管理，而不是模块为单位
- 建议使用反向代理指向不同版本的服务实例，而不是在一个服务应用中保留多个版本的接口
- 使用请求头来指定需要使用的接口版本
- 仅在无法通过路径区分版本时使用


子设计文档
-----------

.. toctree::
   :maxdepth: 1
   :glob:

   ./scheme/index
   ./transport/index
   ./manager
   ./dal
   ./auth
   ./event
